callback oracle_gcd(int a, int b) -> int {
// the oracle returns the maximum greater divisor of a and b
// in skeleton: assert( a >= 0); assert( b >= 0);
    write a, b;
    flush;
    var int ans;
    read ans;
    return ans;
}

callback oracle_lcm(int a, int b) -> int {
// the oracle returns the minimum common multiplier of a and b
// in skeleton: assert( a >= 0); assert( b >= 0);
    write a, b;
    flush;
    var int ans;
    read ans;
    return ans;
}

function lcm(int a, int b) -> int;
// should return the minimum common multiplier of a and b
// in template: assert( a >= 0); assert( b >= 0);

function gcd(int a, int b) -> int;
// should return the greatest common divisor of a and b
// in template: assert( a >= 0); assert( b >= 0);

main {
    var int a, b, ans;
    read a, b;
// (python "assert( a >= 0)";)
// (python "assert( b >= 0)";)
    call lcm(a, b) -> ans;
    write ans;
    flush;

    var int a2, b2, ans2;
    read a2, b2;
// (python "assert( a2 >= 0)";)
// (python "assert( b2 >= 0)";)
    call gcd(a2, b2) -> ans2;
    write ans2;
}
